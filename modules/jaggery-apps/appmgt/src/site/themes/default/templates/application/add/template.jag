<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

jagg.template("application/add", function (inputs, outputs, jagg) { %>

<%
    var appFacURL = getProperty(APPFACTORY_SERVER_URL).split("services")[0];
    var webContext = getProperty(WEB_CONTEXT_ROOT);
    var helpTips = outputs.helpTips;
    var uploadableAppExts = outputs.uploadableAppExts;
    var mod = jagg.module("manager");
    var type = request.getParameter("type");
    var uploadableApplicationMaxSize=outputs.uploadableApplicationMaxSize;
    var appTypeBean = outputs.appTypeBean;
    var appType = appTypeBean.getApplicationTypeName();
    var appTypeDisplayName = appTypeBean.getDisplayName();
    var apptypeIconImageClass = appTypeBean.getIconImageClass();


    var buttonCreateUpload = "Create";
    if( type == "existing"){
        buttonCreateUpload = "Upload";
    }
    %>


    <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/old_css/jquery-ui.css'))%>">
    <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/jquery-ui-1.10.4.js'))%>"></script>
    <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/userActivity.js'))%>"></script>
    <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/noty-2.3.5/jquery.noty.packaged.min.js'))%>"></script>
    <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/noty-2.3.5/themes/noty.theme.wso2.js'))%>"></script>


    <script type="text/javascript">

        var MAX_APP_KEY_LENGTH = 20;

 var appNameErrorMsg = "Invalid Application Name";  // used to hold the validation error message of the app name
 var iconErrorMsg = "Invalid Image";                // used to hold the validation error message of the app icon

 // used to hold the validation error message of the app key
 // Here we are initializing the error message as duplicated app name since we are not allowing to change the app key
 var appKeyErrorMsg = "Invalid Application Name";

 // When uploadable app type is selected, we upload the file before submitting the form. For that we use jquery file
 // upload plugin and we handle validation using that plugin
 var fileUploadSuccess = false;                     // Whether the file upload is success or not
 var fileUploadErrorMsg = "Invalid File";           // File upload error message
 var uploadStartTime = 0;
 var appCreationType = '<%=type%>';
 var uploadableApplicationMaxSize = '<%=uploadableApplicationMaxSize%>';
 var helpTips;
 var uploadableAppExts = JSON.parse('<%=stringify(uploadableAppExts)%>');

/**
* **************************************************************************
* Start of form validation methods
* For more info refer to http://jqueryvalidation.org/documentation/
**/

// Return whether the uploaded archive is validated or not
function validateUploadedArchive(){
    // fileUploadSuccess is updated by the file upload plugin upon success or failure of the uploaded file
    return fileUploadSuccess;
}

function getFileUploadErrorMsg(){
    return fileUploadErrorMsg;
}

// Return whether the app icon is validated or not
function validateAppIcon(value) {
    var file = $("#appIcon");
    if (file.val() != "" && (ie == undefined || ie > 9) ) {
        return validateIconImage(file.val(), file[0].files[0].size);
    } else {
        return true;
    }
}

function getIconErrorMessage(){
    return iconErrorMsg;
}

function getAppNameErrorMessage(){
    return appNameErrorMsg;
}

function getAppKeyErrorMessage(){
    return appKeyErrorMsg;
}

 function validateDuplicateApplicationKey(key) {
     var isKeyValid = validateApplicationKeyContent();
     if (isKeyValid) {
         jagg.syncPost("../blocks/application/add/ajax/add.jag", {
             action: "isApplicationKeyAvailable",
             applicationKey: key
         }, function(result) {
             if (result.isAvailable == "true") {
                 isKeyValid = true;
             } else {
                 isKeyValid = false;
                 // Here we are setting the error message as duplicated app name since we are not allowing to change
                 // the app key
                 appKeyErrorMsg = 'Invalid Application Name - Create a name which is not duplicated';
             }
         }, function(jqXHR, textStatus, errorThrown) {

             if (jqXHR.status != 0) {
                 // Here we are setting the error message as duplicated app name since we are not allowing to change
                 // the app key
                 appKeyErrorMsg = 'Error while checking the availability of the application name';
             }

             isKeyValid = false;
         });
     }
     return isKeyValid;
 }

 function validateDuplicateApplicationName(appName) {
     var isNameValid = validateApplicationName();
     jagg.syncPost("../blocks/application/add/ajax/add.jag", {
         action: "isAppNameAlreadyAvailable",
         applicationName: appName
     }, function(result) {
         if (result.isAvailable == "true") {
             isNameValid = true;
         } else {
             isNameValid = false;
             appNameErrorMsg = 'Invalid Application Name - Create a name which is not duplicated';
         }
     }, function(jqXHR, textStatus, errorThrown) {

         if (jqXHR.status != 0) {
            appNameErrorMsg = 'Error while checking the availability of the application name';
         }

         isNameValid = false;
     });
     return isNameValid;
 }

 function getFileExtension(filename) {
     var parts = filename.split('.');
     return parts[parts.length - 1];
 }

 function validateIconImage(filename, fileSize) {

     var ext = getFileExtension(filename);
     var maxSize = 5242880;
     var isValidExtension = false;
     var isValidIconSize = false;

     // Check extension
     switch (ext.toLowerCase()) {
         case 'jpg':
         case 'jpeg':
         case 'gif':
         case 'bmp':
         case 'png':
             isValidExtension = true;
             break;
         default:
            iconErrorMsg = "Invalid image selected for Application Icon - Select a valid image";
            isValidExtension = false;
            break;
     }
     // Check size
     if(!fileSize) {
        iconErrorMsg = "Image file should be non-empty";
        isValidIconSize = false;
     } else if (fileSize != undefined && fileSize > maxSize) {
        iconErrorMsg ="Image file should be less than 5MB";
        isValidIconSize = false;
     } else {
         isValidIconSize = true;
     }
     return (isValidExtension && isValidIconSize);
 }

 function validateApplicationKeyAlphaNumeric() {
     var isKeyValid = true;
     var keyValue = $("#applicationKey").val();

     var patternForSpace = / /g;
     var isSpace = patternForSpace.test(keyValue);

     var patternForNonAlphaNumericChars = /[^\w\s]/gi;
     var isInvalidChar = patternForNonAlphaNumericChars.test(keyValue);

     var patternForUnderscore = /_/g;
     var isUnderScore = patternForUnderscore.test(keyValue);

     if (isSpace == true || isInvalidChar == true || isUnderScore == true) {
         // Here we are setting the error message as duplicated app name since we are not allowing to change
         // the app key
         appKeyErrorMsg =  "Invalid Application Name - Create a name which has only alphanumeric characters"
         isKeyValid = false;
     } else {
         $('#applicationKey').val(keyValue);
         isKeyValid = true;
     }
     return isKeyValid;
 }

 function validateApplicationKeyContent() {
     var isKeyValid = true;
     var appKeyLength = ($("#applicationKey").val()).length;
     if (appKeyLength == 0) {
         // Here we are setting the error message as duplicated app name since we are not allowing to change
         // the app key
         appKeyErrorMsg = "Invalid Application Name - Create a Name which is not empty";
         isKeyValid = false;
     } else if (!isNaN($("#applicationKey").val())) {
         // Here we are setting the error message as duplicated app name since we are not allowing to change
         // the app key
         appKeyErrorMsg =  "Invalid Application Name - Create a name which has does not have only numeric characters";
         isKeyValid = false;
     } else {
         isKeyValid = validateApplicationKeyAlphaNumeric();
     }
     return isKeyValid;
 }

 function validateApplicationName() {
     var appNameLength = ($("#applicationName").val()).length;
     var isNameValid = validateApplicationNameForQuotes();
     if (appNameLength == 0) {
         appNameErrorMsg = "Invalid Application Name - Create a Name which is not empty";
         isNameValid = false;
     } else if (appNameLength > 200) {
         appNameErrorMsg = "Invalid Application Name - Too Lengthy";
         isNameValid = false;
     }
     return isNameValid;
 }

 function validateApplicationNameForQuotes() {
     var appName = $("#applicationName").val();
     var isNameValid = true;
     var patternForNonQuotationMarks = /[^\w ]/g;
     var isInvalidChar = patternForNonQuotationMarks.test(appName);

     if (isInvalidChar == true) {
        appNameErrorMsg = "Invalid Application Name - Create a name without special characters";
        isNameValid = false;
     } else {
         isNameValid = true;
     }
     return isNameValid;
 }

 function validateUploadableArtifactSize(fileSize) {
      return (fileSize < uploadableApplicationMaxSize);
 }
 // End of form validation methods

/**
* Used to show error messages at the top
*/
function showTopErrorMessage(msg) {
    noty({
             theme: 'wso2',
             layout: 'top',
             type: 'error',
             text: msg,
             animation: {
                 open: {height: 'toggle'}, // jQuery animate function property object
                 close: {height: 'toggle'}, // jQuery animate function property object
                 easing: 'swing', // easing
                 speed: 500 // opening & closing animation speed
             }
         });
}

 /**
 * **************************************************************************
 * Start of JQuery file upload callback functions
 * https://github.com/blueimp/jQuery-File-Upload/wiki/Options#callback-options
 * *************************************************************************
*/

function fileUploadSubmit(e, data){
    var appType = $('#appType').val();
    var allowedAppTypeExtention = uploadableAppExts[appType];
    data.url = "../blocks/application/add/ajax/add.jag",
    data.dataType = 'json',
    data.acceptFileTypes =new RegExp("(\\.|\/)("+allowedAppTypeExtention+")$"),
    data.formData = {action:'uploadExistingArchive',
            appType:appType,
            applicationKey:$("#applicationKey").val()}
}

function fileUploadSend(e, data) {
    var appKey = $('#applicationKey').val().trim();
    if (data.files.length < 1 || !appKey.length || appKey == null ) {
        $('#progress').hide();
        return false;
    }
}

function fileUploadChange(e, data){
    $('#progress').show();
    $.each(data.files, function (index, file) {
        $('#progress').removeClass('progress');
        $('#progressDiv').removeClass('progress-bar').removeClass("progress-bar-success").removeAttr("style");
        $('#progressDiv').addClass('progress-bar').addClass("progress-bar-success");
        $('#progress').addClass("progress");
        $("#fileUploadDisplay").val(file.name);
    })
}

function fileUploadProgressAll(e, data){
    var progress = parseInt(data.loaded / data.total * 100, 10);
    $('#progress .progress-bar').css(
        'width',
        progress + '%'
    );
}

function fileUploadProcessAlways(e, data){
    var index = data.index,
        file = data.files[index],
        displayMsg="";
    if (file.error) {
        $('#progress').hide();
        fileUploadErrorMsg = "Invalid file type. Expected file type is ."+ uploadableAppExts[$('#appType').val()];
        var validator = $( "#createAppForm" ).validate();
        validator.element( "#fileUploadDisplay" );
    } else if(!validateUploadableArtifactSize(file.size)){
        $('#progress').hide();
        fileUploadErrorMsg = "Uploaded file size is bigger than the allowed maximum size.";
        var validator = $( "#createAppForm" ).validate();
        validator.element( "#fileUploadDisplay" );
    } else {
        $('#progress').show();
    }
}

function fileUploadDone(e, data){
    if(data.result.isSuccessful){
        fileUploadSuccess = true;
        // Here we set uploadedApplicationKey value to current applicationKey value to identify whether the app key
        // has changed, when user clicks the create application button
        $("#uploadedApplicationKey").val($("#applicationKey").val());
    } else {
        fileUploadSuccess = false;
        $('#progress').hide();
        fileUploadErrorMsg = data.result.message;
    }
     var validator = $( "#createAppForm" ).validate();
     validator.form();
}

function fileUploadFail(e, data){
    $('#progress').hide();
    fileUploadSuccess = false;
    var appKey = $('#applicationKey').val().trim();
    if (data.files.length ) {
        fileUploadErrorMsg = "Please upload non empty file";
    } else if(!appKey.length || appKey == "null"){
        fileUploadErrorMsg= "Invalid application name";
    }else {
        fileUploadErrorMsg = "Error occurred while validating the application";
    }
     var validator = $( "#createAppForm" ).validate();
     validator.form();
}
//End of JQuery file upload callback functions

function showLoader(show){
    var showOrHide = (show) ? 'show' : 'hide';
    $('.loader').loading(showOrHide);
    $('.loading-cover').overlay(showOrHide);
}
 var ie = (function() {
     var undef, v = 3,
         div = document.createElement('div');

     while (
         div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
         div.getElementsByTagName('i')[0]
     );

     return v > 4 ? v : undef;
 }());


 $(document).ready(function($) {

    $('#progress').hide();
    showLoader(false);
     $("#appIcon").change(function() {
         $("#icon").val($("#appIcon").val());

         // validate the app icon upon changes
         var validator = $( "#createAppForm" ).validate();
         validator.element( "#icon" );
     });

     initializeUserActivity("appCreation", null, null);

     $("#progressOverlay").hide();
     $("#progressSpinner").hide();
     $("#progress-bar-container-id").hide();
     $(".upload").hide();
     $(".hide_on_upload").show();
     $("#progressSpinner").css({
         top: document.body.clientHeight / 2 - $("#progressSpinner").height(),
         left: document.documentElement.clientWidth / 2 - $("#progressSpinner").width(),
         position: 'absolute'
     });
     $("#progress-bar-container-id").css({
         top: document.body.clientHeight / 2 - $("#progressbar").height(),
         left: document.documentElement.clientWidth / 2 - $("#progressbar").width(),
         position: 'absolute'
     });
     $("#progressOverlay").css({
         height: document.body.clientHeight,
         width: document.body.clientWidth
     });




     var submitbutton = $("#SubmitButton");

    /**
    * Registering custom validation methods
    * For more info refer to http://jqueryvalidation.org/documentation/
    */

    $.validator.addMethod("validateDuplicateApplicationName",
            validateDuplicateApplicationName, getAppNameErrorMessage);
    $.validator.addMethod("validateApplicationName",
            validateApplicationName, getAppNameErrorMessage);
    $.validator.addMethod("validateDuplicateApplicationKey",
            validateDuplicateApplicationKey, getAppKeyErrorMessage);
    $.validator.addMethod("validateAppIcon",
            validateAppIcon, getIconErrorMessage);


    // Classes to be added to parent div of the validated element
    var errorFormGroupClasses = "has-error";        // if validation is failed
    var successFormGroupClasses = "has-success";    // if validation is successful
    var feedBack = "has-feedback";

    // Setting validation options
    // More info: http://jqueryvalidation.org/validate#validate-options
    var creationFormValidationOpts = {
        rules: {                                        // validation rules
            applicationName: {                          // applicationName filed
                required: true,
                validateDuplicateApplicationName: true,
                validateApplicationName: true,
                validateDuplicateApplicationKey: true
            },
            icon: {                                     // app icon field
                validateAppIcon: true
            }
        },
        onsubmit: false,    // Since we are handling on submit validation on click event of the "Create" button,
                            // here we disabled the form validation on submit
        highlight: function (element, errorClass, validClass) { // this is triggered when the "element" is invalid
            $(element).addClass(errorClass).removeClass(validClass);
            $(element.form).find("div[for=" + element.id + "]").addClass(errorFormGroupClasses)
                    .removeClass(successFormGroupClasses).addClass(feedBack);

            $(element.form).find("label[for=" + element.id + "]").addClass(errorClass);
            $(element.form).find("span[for=" + element.id + "]").removeClass("glyphicon-ok")
                    .addClass("glyphicon-remove").show();

            // If app name is not validated, disable upload application archives for uploadable apps
            if ($(element).is($("#applicationName")) && (appCreationType == "existing")) {
                $("#fileupload").prop("disabled", true);
            }

        },
        unhighlight: function (element, errorClass, validClass) { // this is triggered when the "element" is valid
            $(element).removeClass(errorClass).addClass(validClass);
            $(element.form).find("div[for=" + element.id + "]").addClass(successFormGroupClasses).removeClass(errorFormGroupClasses)
                    .addClass(feedBack);
            $(element.form).find("span[for=" + element.id + "]").removeClass("glyphicon-remove").addClass("glyphicon-ok")
                    .show();

            // If app name is validated, enable upload application archives for uploadable apps
            if ($(element).is($("#applicationName")) && (appCreationType == "existing")) {
                $("#fileupload").prop("disabled", false);
            }
        },
        showErrors: function (event, validator) {
            // Disable app creation button if the form is not valid
            if (this.numberOfInvalids() > 0) {
                $("#add-application").prop("disabled", true);
            } else if ((appCreationType == "existing") && !fileUploadSuccess) {
                $("#add-application").prop("disabled", true);
            } else {
                $("#add-application").prop("disabled", false);
            }
            this.defaultShowErrors();
        },
        errorPlacement: function (error, element) {
            if ($(element).parent().closest('div').hasClass("input-group")) {
                error.insertAfter($(element).closest('div'));
            } else {
                error.insertAfter(element);
            }
        }
    };

    // If application type is an uploadable application, register validate methods
    if (appCreationType == "existing") {
        $.validator.addMethod("validateUploadedArchive", validateUploadedArchive, getFileUploadErrorMsg);
        creationFormValidationOpts['rules']['fileUploadDisplay'] = {
            required: true,
            validateUploadedArchive: true
        }
    }

    // Register createAppForm with above options for validation
    $("#createAppForm").validate(creationFormValidationOpts);
    // End of registering form validation methods and options

     $("#createAppForm").ajaxForm({
         beforeSubmit: function(){
         },
         complete: function(result,status) { // on complete
             if(status.toLowerCase() != 'success') {
                showTopErrorMessage("Error occurred while creating the application");
                showLoader(false);
                return false;
             }
             var resp = result.responseText;
             var response = jQuery.parseJSON(resp);

             if (response != undefined) {
                 var repositoryPath = response.toString();

                 if (response.result == 1.0) {
                 var appKey = $("#applicationKey").attr('value');
                 var appName = $("#applicationName").val();
                 var isUploadable = false
                 if ($("#action").val() == "uploadExistingApplication") {
                   isUploadable = true;
                }
                 var redirectionPageParams = "application.jag?applicationName=" + appName + "&applicationKey=" +
                    appKey + "&isUploadableAppType=" + isUploadable + "&userAction=created";
                     window.location.replace(redirectionPageParams);
                 } else if (response.result == 0.0) {
                     //$("#appcreation").attr('disabled', false);
                 }
             }

         }
     });

    // Registering callback functions for file upload
    // more info: https://github.com/blueimp/jQuery-File-Upload/wiki/Options#callback-options
    if (appCreationType == "existing") {
        $('#fileupload')
        .bind('fileuploadsubmit', fileUploadSubmit)
        .bind('fileuploadsend', fileUploadSend)
        .bind('fileuploadchange', fileUploadChange)
        .bind('fileuploadprogressall', fileUploadProgressAll)
        .bind('fileuploadprocessalways', fileUploadProcessAlways)
        .bind('fileuploaddone', fileUploadDone)
        .bind('fileuploadfail', fileUploadFail);

         $('#fileupload').fileupload({
            maxFileSize:uploadableApplicationMaxSize, //file size in bytes.
            acceptFileTypes:new RegExp("(\\.|\/)("+uploadableAppExts[$('#appType').val()]+")$")
        });
    }
    // End of registering callback functions for file upload

     $('#applicationName').keyup(function(event) {
         var msg = $(this).val();
         if (msg.length > $("#applicationName").attr('maxlength')) {
             msg = msg.substring(0, $("#applicationKey").attr('maxlength'));
         }
         msg = msg.replace(/[^a-zA-Z0-9]+/g, '');
         msg = msg.toLowerCase();
         if (msg.length >= MAX_APP_KEY_LENGTH) {
             $("#applicationKey").val(msg.substring(0, $("#applicationKey").attr('maxlength')));
         } else {
             var url = '<%=appFacURL%>' + '<%=webContext%>' + "/site/pages/application.jag?applicationName=" + msg + "&applicationKey=" + msg;
             $('#appHome').text(url);
             $('#applicationKey').val(msg);
         }
         var isNameValid = validateApplicationName();
         if(isNameValid){
            if (appCreationType == "existing") {
                $("#fileupload").prop("disabled", false);
                if(!fileUploadSuccess){
                    $("#add-application").prop("disabled", true);
                } else {
                     $("#add-application").prop("disabled", false);
                }
            } else {
                $("#add-application").prop("disabled", false);
            }
         } else {
            $("#add-application").prop("disabled", true);
         }
     });

     // Validate Icon
     $("#icon").change(function() {
         var file = $('#icon');
         validateIconImage(file.val(), this.files[0].size);
     });

 });



 function format(type) {
     return "<div class='app-type-icon-list-display' style='background-image: url(<%=jagg.getAbsoluteUrl(jagg.getThemeFile('assets/img/apptype/" + type.id + ".png')) %>);' ></div>" + type.text;
 }

 function generateKey() {
     return key;
 }

 //New Function to submit upload apps and create new apps
 function submitAppForm(type) {
    showLoader(true);
    var validator = $( "#createAppForm" ).validate();
    var formValidated = validator.form();
    if(formValidated) {
         if (type == "new") {
             $("#action").val("createNewApplication");
         } else {
             $("#action").val("uploadExistingApplication");
         }
         $("#createAppForm").submit();
         //showTopSuccessMsg("Application creation started.");
    } else {
        showLoader(false);
    }
 }

 function bitesToSize(bits) {
     var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
     if (bits == 0) return '0 Bits';
     else if (bits < 8) return bits + ' Bits';
     var bytes = Math.round(bits / 8);

     var unit = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
     return Math.round(bytes / Math.pow(1024, unit), 2) + ' ' + sizes[unit];
 }

 function clearUploadIconField() {
     document.getElementById("icon").value = "";
}

    </script>
<!--#######################################################################-->

    <!-- BOF App factory menu actionbar -->
    <div class="action-bar">
        <a href="<%=jagg.getAbsoluteUrl("/site/pages/apptypeselection.jag")%>?type=<%=type%>" class="btn-action" title="Back to app type selection">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-ring fw-stack-2x"></i>
                    <i class="fw fw-left-arrow fw-stack-1x"></i>
                </span> Back to app type selection
        </a>
        <a href="<%=jagg.getAbsoluteUrl("/site/pages/index.jag")%>" class="btn-action" title="Cancel">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-ring fw-stack-2x"></i>
                    <i class="fa fa-mail-reply-all fa-stack-1x"></i>
                </span> Cancel
        </a>
    </div><!-- EOF App factory menu actionbar-->



    <div class="container-fluid cloud-container">
        <div class="row">
            <div class="tmp-logo-responsive-fix">
                <div class="cloud-selected-app-type  <%=request.getParameter("apptypeIconColor")%>">
                    <i class="fw <%=request.getParameter("apptypeIconImageClass")%> fw-5x"></i>
                </div>
            </div>
            <div class="col-md-6">
                <div class="cloud-selected-app-type-name">
                    <h1><%=request.getParameter("appTypeDisplayName")%></h1>
                </div>
            </div>
        </div>
         <div class="row">
            <form enctype="multipart/form-data" method='post' action='<%=jagg.getAbsoluteUrl("/site/blocks/application/add/ajax/add.jag")%>'  name="createAppForm" id="createAppForm">
                <input type="hidden" name="action" id="action" value="createNewApplication" />
                <div class="col-md-5 forms">
                    <div class="loading-cover loading-overlay">
                      <div class="loader"></div>
                    </div>
                    <div class="form-group" for="applicationName">
                        <label for="application-name">Application Name: </label>
                        <input type="appname" class="form-control" name="applicationName" id="applicationName" placeholder="Enter Application name">
                        <span class="glyphicon glyphicon-remove form-control-feedback" for="applicationName" style="display: none;"></span>
                    </div>
                    <input  type='hidden' maxlength="19" id='applicationKey' name="applicationKey" placeholder="Application Key" class="half required" />
                    <input  type='hidden' maxlength="19" id='appTypeDisplayName' name="appTypeDisplayName" value="<%=appTypeDisplayName%>"/>
                    <input  type='hidden' maxlength="19" id='appType' name="appType" value="<%=appType%>"/>
                    <input  type='hidden' maxlength="19" id='repositoryType' name="repositoryType" value="git"/>
                    <input  type='hidden' maxlength="19" id='repoAccessibility' name="repoAccessibility" value="perDevRepo"/>
                    <div class="form-group">
                        <label for="application-description">Description: </label>
                        <textarea class="form-control" name='applicationDescription' id='applicationDescription' rows="3"></textarea>
                    </div>

                    <!-- If uploadable application -->
                    <% if(type == "existing"){%>
                    <input  type='hidden' maxlength="19" id='uploadedApplicationKey' name="uploadedApplicationKey"/>
                    <div class="form-group" for="fileUploadDisplay">
                        <label for="application-icon">Upload Application: </label>
                        <div class="input-group">
                            <input type="text" id="fileUploadDisplay" name="fileUploadDisplay" class="form-control" readonly>
                        <span class="input-group-btn">
                            <!-- The file input field used as target for the file upload widget -->
                            <span class="btn btn-primary btn-file">
                                    Upload&hellip; <input id="fileupload" type="file" name="fileupload" multiple
                                    disabled>
                            </span>
                        </span>
                        <!-- Progress bar-->
                        </div>
                            <div id="progress" class="progress">
                                <div id="progressDiv" class="progress-bar progress-bar-success"></div>
                        </div>
                    </div>
                    <!-- Upload archive error msg div-->
                    <% } %>

                    <div class="form-group">
                        <label for="application-icon">Icon:
                            <i class="fa fa-question-circle help-tips" data-toggle="tooltip" data-placement="left"
                        title="Recommended image size : 300 x 300 pixels, file size 70 k (maximum)"></i>
                        </label>
                        <div class="input-group">
                            <input type="text" id="icon" name="icon" class="form-control" readonly>
                            <span class="input-group-btn">
                                <span class="btn btn-primary btn-file">
                                    Upload&hellip; <input type="file" id="appIcon" name="appIcon"/>
                                </span>
                                <span class="btn btn-primary btn-file" onclick="clearUploadIconField()" id="clear">
                                    Clear
                                </span>
                           <!--     <span class="btn btn-primary btn-file">
                                    Clear&hellip;
                                    <button type="reset" id='clear'/>
                                </span>-->
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="cu-btn cu-btn-sm cu-btn-blue" id="add-application"
                            onclick="submitAppForm('<%=type%>')" disabled>
                            <span class="fw-stack fw-lg btn-action-ico">
                                <i class="fw fw-ring fw-stack-2x"></i>
                                <i class="fw fw-add fw-stack-1x"></i>
                            </span>
                            <%=buttonCreateUpload%>
                        </button>
                    </div>
                </div>
                <input type="hidden" name="userName"  id="userName" value='<%=jagg.getUser()%>'/>
            </form>
        </div>
    </div><!-- /.container -->

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/custom/loader.js'))%>"></script>
<!-- include custom js functions -->
<script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/custom/custom.js'))%>"></script>
<!--####################################################################### end-->
<% }); %>
