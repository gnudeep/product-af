<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log=new Log();
var EventBuilder = Packages.org.wso2.carbon.appfactory.eventing.builder.utils.AppInfoUpdateEventBuilderUtil;
var loggedInUser = jagg.getUser();
var modManager = jagg.module("manager");
var modApplication = jagg.module("application");
(function () {
    var mod, obj, result,
            action = request.getParameter("action"),
            log = new Log(),
            site = require("/site/conf/site.json");
            mod = jagg.module("application");
            permission = jagg.module("permission");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if (action == "updateDescription") {
        mod = jagg.module("application");
        var applicationKey = request.getParameter("applicationKey");
        var newDescription = request.getParameter("newDescription");

        if(permission.checkUserActionPermission(applicationKey,PERMISSION_APPLICATION_MEMBER)){
            try{
                updateAppDescription(applicationKey, newDescription);
            } catch (e1) {
                // We are just logging the error message here since "updateAppDescription" method logs the errors with
                // more descriptive manner
                log.error(e1);
                response.status = 400;
                response.content = "Error occurred while updating application description";
            }
        } else {
            response.status = 401;
            response.content = "You don't have permission to edit the application description";
        }
    }else if(action == "removeFailedPendingApps"){
        mod = jagg.module("application");
        var pendingAppKeys = mod.getAppKeysFromUserHomeCache(APPLICATION_CREATION_STATUS.PENDING);
        if(pendingAppKeys.length > 0) {
            mod.removeAppsFromUserHomeCache(APPLICATION_CREATION_STATUS.PENDING,pendingAppKeys);
        }
    }else if (action == "updatePromoteStatus") {
        var applicationKey = request.getParameter("applicationKey");
        var version = request.getParameter("version");
        var nextStage = request.getParameter("nextStage");
        var state = request.getParameter("state");

        mod = jagg.module("application");
         try{
              mod.updatePromoteStatus(applicationKey, nextStage, version, state);
         }catch(e){
 	    	var err = "Error while updating PromoteStatus of the "+ applicationKey + " version " +version; 
 			log.error( err + e.message);
 			throw ( err + e.message )
 	    }
	}else if(action == "changeAppIcon"){
	var applicationKey = request.getParameter("applicationKey");
	var applicationName = request.getParameter("applicationName");
        try{
            var appIcon = request.getFile("changeIcon");
            changeApplicationIcon(applicationKey, appIcon);
	print("<html><script>window.location.replace('/appmgt/site/pages/application.jag?applicationName=" + applicationName + "&applicationKey=" + applicationKey + "');</script><body></body></html>");
        }catch(e){
            log.warn("No Application Icon found to upload.  " + e);
            // Just skip when error occured becauyse there
            // is no file to upload.
        }

    } else if(action == "changeGeneralInfo"){
        var applicationKey = request.getParameter("applicationKey");
        var newDescription = request.getParameter("description");
        var errorOccurred = {
            status: false,
            msg:""
        };

        if(permission.checkUserActionPermission(applicationKey,PERMISSION_APPLICATION_MEMBER)){
            // update app icon
            if(log.isDebugEnabled()){
                log.debug("Updating app icon for application: "+applicationKey+" tenantDomain: "+ modManager
                        .getTenantDomain());
            }
            try{
                var appIcon = request.getFile("appIcon");
                changeApplicationIcon(applicationKey, appIcon);
            } catch(e){
                var tenantDomain = modManager.getTenantDomain();
                log.error("Error while uploading appIcon or no appIcon found to upload for application: "+
                          applicationKey+" tenant: "+tenantDomain);
                log.error(e);
                errorOccurred.status = true;
                errorOccurred.msg = "Error occurred while updating application icon";
            } // end of update app icon

            // update app description
            if(log.isDebugEnabled()){
                log.debug("Updating app description for application: "+applicationKey+", tenantDomain: "
                          + modManager.getTenantDomain());
            }
            try {
                updateAppDescription(applicationKey, newDescription);
            } catch(e){
                // We are just logging the error message here since "updateAppDescription" method logs the errors with
                // more descriptive manner
                log.error(e);
                errorOccurred.status = true;
                errorOccurred.msg = "Error occurred while updating application description"
            } // end of update app description

            if(errorOccurred.status) {
                response.status = 400;
                response.content = errorOccurred.msg;
            }
        } else {
            response.status = 401;
            response.content = "You don't have permission to edit the application description";
        }
    }else {
	    throw new Error("Invalid action");
    }

}());

/**
 * Update application icon
 *
 * @param applicationKey application key
 * @param appIcon file object of the appIcon
 */
function changeApplicationIcon(applicationKey, appIcon){
    var registryMod = jagg.module("registry");
    if(appIcon){
        var regPath = "/_system/governance/repository/applications/"+applicationKey+"/icon";
        var type = 'image/jpg';
        registryMod.deleteResourceInTenantSpace(regPath);
        registryMod.createResourceInTenantSpace(regPath,appIcon.getStream(),type);
        var noIconList = session.get("iconsNotAvailableApps");
        if(noIconList[applicationKey] != null){
            noIconList[applicationKey]=null;
            session.put("iconsNotAvailableApps", noIconList);
        }
    }
}

function updateAppDescription(applicationKey, newDescription){
    try{
        var appInfo = modApplication.getAppInfo(applicationKey);
        modApplication.editAppInfo(appInfo.name, applicationKey, newDescription, appInfo.type, appInfo.repositoryType,
                                     appInfo.mappedSubDomain, appInfo.repoAccessability, appInfo.branchCount, appInfo.owner);
        //Notifiying to app wall
        var message = "Description updated successfully";
        try {
            var updatedUser = jagg.getUser();
            var msgDescription = "Description: " + newDescription;
            EventBuilder.createDescriptionUpdateCompletedEvent(applicationKey, updatedUser, message, msgDescription, "INFO");
        } catch (e) {
            log.error("Error while sending notification for app description update event, " +
                      "for application key: "+applicationKey+ ", tenantDomain: "+modManager.getTenantDomain());
            log.error(e);
        }
    } catch (e1) {
        var tenantDomain = modManager.getTenantDomain();
        //Notifiying to app wall
        try {
            message = "Failed to update the description. ";
            EventBuilder.createDescriptionUpdateCompletedEvent(applicationKey, loggedInUser, message, "", "ERROR");
        } catch (e) {
            log.error("Error while sending notification for Failed app description update event, " +
                      "for application key: "+applicationKey+ ", tenantDomain: "+tenantDomain);
            log.error(e);
        }

        var err = "Error while updating description of applicationKey " + applicationKey
                + ", tenantDomain: " + tenantDomain;
        log.error(err);
        log.error(e1);
        throw (err);
    }
}
%>
