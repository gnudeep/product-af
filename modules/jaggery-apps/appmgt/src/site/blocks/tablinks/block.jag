<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
jagg.block("tablinks", {
    initialize:function (data) {
    },
    getInputs:function () {
    },
    getOutputs:function (inputs) {
        var userName = jagg.getUser();
    	var dashboardUrl = "";
	    var cloudMgtUrl = "";
    	var dashboardPath = "";
    	var serverUrl = getProperty(DASHBOARD_SERVER_URL);
    	var mod = jagg.module("manager");
    	var result = false;
    	var carbon = require('carbon');
    	var server = carbon.server;
    	var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
    	var tenantDomain = null;

        //Tablink permissions
        var isOverviewAllowed = true;
        var isTeamAllowed = true;
        var isReposAndBuildsAllowed = false;
        var isResourcesAllowed = false;
        var isIssuesAllowed = true;
        var isLifecylceAllowed = false;
        var isLogsAllowed = false;

    	var permissionModule = jagg.module("permission");
        var manager = jagg.module("manager");
    	var tenantID = null;
    	var hasTenantLevelUserMgtPermission = null;
    	var isOTtenant = false;
    	var hasCXOPermission = null;
    	var deploymentStages = getProperties(DEPLOYMENT_STAGES);

    	var applicationType = false;
    	var isUploadableAppType = false;
        var isAllowDomainMapping = false;

    	var isOtherServicesTabAvailable = getProperty(SHOW_OTHER_SERVICES_TAB);

    	var log = new Log();

    	if(userName){

    		if(!inputs.applicationKey){
    			tenantDomain = mod.getTenantDomain();
    			tenantID = realmService.getTenantManager().getTenantId(tenantDomain);
    			hasTenantLevelUserMgtPermission = permissionModule.hasTenantLevelUserMgtPermission();
    			if(session.get(TENANT_INFO)){
    			    isOTtenant = session.get(TENANT_INFO).isOTTenant;
    			}
    			hasCXOPermission = permissionModule.isUserAccessGrantedForPlatform(PERMISSION_CXO_DASHBOARD);
    			dashboardPath = getProperty(TENANT_ADMIN__DASHBOARD_PATH);
    			dashboardUrl = serverUrl + dashboardPath;
			    cloudMgtUrl = getProperty(CLOUDMGT_SERVER_URL);
		
    		}else{

    			var applicationKey = inputs.applicationKey;
    			var applicationName = inputs.applicationName;

                hasTenantLevelUserMgtPermission = permissionModule.hasTenantLevelUserMgtPermission();

                // Set tablinks
                isOverviewAllowed = (jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_OVERVIEW) || hasTenantLevelUserMgtPermission);
                isTeamAllowed  = (jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_TEAM) || hasTenantLevelUserMgtPermission);
                isReposAndBuildsAllowed = (jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_REPOS_AND_BUILDS) || hasTenantLevelUserMgtPermission);
                isResourcesAllowed = (jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_RESOURCES) || hasTenantLevelUserMgtPermission);
                isIssuesAllowed = (jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_ISSUES) || hasTenantLevelUserMgtPermission);

                var isLifecylceAllowedDemoteTo = jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_LIFECYCLE_MANAGEMENT_DEMOTE_TO);
                var isLifecylceAllowedPromoteTo = jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_LIFECYCLE_MANAGEMENT_PROMOTE_TO);
                isLifecylceAllowed = (isLifecylceAllowedDemoteTo || isLifecylceAllowedPromoteTo || hasTenantLevelUserMgtPermission);

                isLogsAllowed = (jagg.module("permission").isUserAccessGrantedForTablink(applicationKey , PERMISSION_TABLINK_LOGS) || hasTenantLevelUserMgtPermission);

                applicationType = manager.getApplicationType(applicationKey);
    			isUploadableAppType = manager.getApplicationTypeBean(applicationType).isUploadableAppType();
                isAllowDomainMapping  = manager.getApplicationTypeBean(applicationType).isAllowDomainMapping();

                var hasAppCreationPermission = permissionModule.hasAppCreationPermission();
                var memberOfApplication = permissionModule.isUserAccessGranted(applicationKey,
                                                                               PERMISSION_APPLICATION_MEMBER);

                // Currently settings page only supports for application deletion, we have restrict settings tab only
                // for app owner. Once other tabs are completed, set this value accordingly
                var isSettingsAllowed = hasAppCreationPermission && memberOfApplication;
    		}
    	}
        return {
            "userName":userName,
            "isOTtenant":isOTtenant,
            "hasCXOPermission":hasCXOPermission,
            "hasTenantLevelUserMgtPermission":hasTenantLevelUserMgtPermission,
            "dashboardUrl":dashboardUrl,
            "dashboardPath":dashboardPath,
            "deploymentStages":deploymentStages,
            "applicationType":applicationType,
            "isUploadableAppType":isUploadableAppType,
            "isOtherServicesTabAvailable":isOtherServicesTabAvailable,
            "isOverviewAllowed":isOverviewAllowed,
            "isTeamAllowed":isTeamAllowed,
            "isReposAndBuildsAllowed":isReposAndBuildsAllowed,
            "isResourcesAllowed":isResourcesAllowed,
            "isIssuesAllowed":isIssuesAllowed,
            "isLifecylceAllowed":isLifecylceAllowed,
            "isLogsAllowed":isLogsAllowed,
            "isAllowDomainMapping":isAllowDomainMapping,
            "isSettingsAllowed":isSettingsAllowed
        };
    }
});
%>
